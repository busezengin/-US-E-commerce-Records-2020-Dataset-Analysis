# -*- coding: utf-8 -*-
"""Capstone_Project_Buse_Zengin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wFVFsvMat2XlI_MbbvYKiyRGv8b3c90S

## About Data

**Link of data:**

https://www.kaggle.com/datasets/ammaraahmad/us-ecommerce-record-2020

The data named 'US E-commerce records 2020' from Kaggle has 3312 rows and 19 columns. This dataset shows the purchases made in the US in 2020 on an e-commerce site.

## Importing the required libraries for EDA
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns                      
import matplotlib.pyplot as plt
import matplotlib as mpl             
# %matplotlib inline     
sns.set(color_codes=True)
import warnings
warnings.filterwarnings('ignore')

"""## Loading the data into the data frame."""

# reads data
ecomm_data = pd.read_csv('/content/US  E-commerce records 2020.csv',encoding='latin1')

"""## Checking Introductory Details About Data"""

ecomm_data.head(10) # To display the first 5 rows

ecomm_data.tail(5)# To display the bottom 5 rows

ecomm_data.shape # finding shape of the data

ecomm_data.info()

print(ecomm_data.isnull().sum())

"""Dataset has no Null values"""

categoricals = ecomm_data.dtypes[ecomm_data.dtypes == 'object'].index.tolist()
numericals = ecomm_data.dtypes[ecomm_data.dtypes != 'object'].index.tolist()
print('Categorical features:', categoricals)
print('Numerical features:', numericals)

for i in range(len(categoricals)):
  print(categoricals[i], 'unique values',ecomm_data[categoricals[i]].unique(),'\n')

"""The Country column only has the value 'United States'. This column is not needed anyway, as the dataset is on US purchases. So this column can be deleted completely."""

ecomm_data = ecomm_data.drop(['Country','Row ID', 'Postal Code'], axis=1)

# converts Order Date column to datetime data type
ecomm_data['Order Date']=pd.to_datetime(ecomm_data['Order Date'], format="%d-%m-%y")

ecomm_data["Month"] = ecomm_data["Order Date"].dt.strftime("%m")

ecomm_data = ecomm_data.replace(
                   {'Month': {'01':'January', '02':'February', '03':'March', '04':'April', '05':'May', '06':'June', '07':'July', '08':'August', '09':'September', '10':'October', '11':'November', '12':'December'}})

ecomm_data['Day of Week']=ecomm_data['Order Date'].dt.dayofweek

ecomm_data = ecomm_data.replace(
                   {'Day of Week': {0:'Monday', 1:'Tuesday', 2:'Wednesday', 3:'Thursday', 4:'Friday', 5:'Saturday', 6:'Sunday'}})

state_codes = {
    'District of Columbia' : 'dc','Mississippi': 'MS', 'Oklahoma': 'OK', 
    'Delaware': 'DE', 'Minnesota': 'MN', 'Illinois': 'IL', 'Arkansas': 'AR', 
    'New Mexico': 'NM', 'Indiana': 'IN', 'Maryland': 'MD', 'Louisiana': 'LA', 
    'Idaho': 'ID', 'Wyoming': 'WY', 'Tennessee': 'TN', 'Arizona': 'AZ', 
    'Iowa': 'IA', 'Michigan': 'MI', 'Kansas': 'KS', 'Utah': 'UT', 
    'Virginia': 'VA', 'Oregon': 'OR', 'Connecticut': 'CT', 'Montana': 'MT', 
    'California': 'CA', 'Massachusetts': 'MA', 'West Virginia': 'WV', 
    'South Carolina': 'SC', 'New Hampshire': 'NH', 'Wisconsin': 'WI',
    'Vermont': 'VT', 'Georgia': 'GA', 'North Dakota': 'ND', 
    'Pennsylvania': 'PA', 'Florida': 'FL', 'Alaska': 'AK', 'Kentucky': 'KY', 
    'Hawaii': 'HI', 'Nebraska': 'NE', 'Missouri': 'MO', 'Ohio': 'OH', 
    'Alabama': 'AL', 'Rhode Island': 'RI', 'South Dakota': 'SD', 
    'Colorado': 'CO', 'New Jersey': 'NJ', 'Washington': 'WA', 
    'North Carolina': 'NC', 'New York': 'NY', 'Texas': 'TX', 
    'Nevada': 'NV', 'Maine': 'ME'}

ecomm_data['State Code'] = ecomm_data['State'].apply(lambda x : state_codes[x])

ecomm_data.dtypes

duplicate_rows = ecomm_data[ecomm_data.duplicated()]
print("number of duplicate rows: ", duplicate_rows.shape)

"""Dataset does not have duplicated rows"""

ecomm_data.head()

"""## Statistical Insight"""

ecomm_data.describe()

"""## Visualization"""

# connects sqlite for SQL queries
from sqlite3 import connect
conn = connect(':memory:')

ecomm_data.to_sql('ecomm_data', conn)

import plotly.express as px

table = pd.pivot_table(ecomm_data, index = ['Product Name','Category'], aggfunc={'Quantity': np.sum}).sort_values(by='Quantity', ascending=False)[:10]
table = table.reset_index()
table

fig = px.bar(table, x='Product Name', y='Quantity', orientation='v',  text_auto=True, color='Category')
fig.update_layout(title={
        'text': "Top 10 most sold products and their categories",
        'y':0.95,
        'x':0.4,
        'xanchor': 'center',
        'yanchor': 'top'},
        yaxis_title='Total Quantity')
fig.update_xaxes(categoryorder="total descending")
fig.show()

"""Here are the 10 products that sell the most in total."""

table = pd.read_sql("SELECT Category, SUM(Quantity) AS [TOTAL QUANTITY] FROM `ecomm_data` GROUP BY Category ORDER BY [TOTAL QUANTITY] DESC", conn)
table

fig = px.pie(table, names='Category', values='TOTAL QUANTITY', title='Percentages of categories', color='Category')
fig.update_layout(title={
        'text': "Percentages of categories",
        'y':0.88,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        legend_title = 'Category',
        legend=dict(x=0.66))
fig.show()

table = pd.read_sql("SELECT Category, [Sub-Category], SUM(Quantity) AS [TOTAL QUANTITY] FROM `ecomm_data` GROUP BY [Sub-Category] ORDER BY [TOTAL QUANTITY] DESC", conn)
table

fig = px.pie(table, names='Sub-Category', values='TOTAL QUANTITY', title='Percentages of sub-categories', color='Sub-Category')
fig.update_layout(title={
        'text': "Percentages of sub-categories",
        'y':0.88,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        legend_title = 'Category',
        legend=dict(x=0.8))
fig.show()

table = pd.pivot_table(ecomm_data, index = ['Month'],  aggfunc={'Quantity': np.sum, 'Sales': np.sum})
table = table.reindex(index=ecomm_data.Month.unique())
table

fig = px.line(table, x=table.index, y="Quantity", title='Total Quantities by Months')
fig.show()

fig = px.line(table, x=table.index, y="Sales", title='Total Quantities by Months')
fig.show()

table = pd.read_sql("SELECT Category, Month, SUM(Quantity) AS [TOTAL QUANTITY] FROM `ecomm_data` GROUP BY Category, Month", conn)
table['Month'] = pd.Categorical(table['Month'], categories=ecomm_data.Month.unique(), ordered=True)
table.sort_values(by='Month', inplace=True)
table

import plotly.graph_objects as go
from plotly.subplots import make_subplots

Office_Supplies = table[table['Category']=='Office Supplies']
Furniture = table[table['Category']=='Furniture']
Technology = table[table['Category']=='Technology']

fig = make_subplots()

fig.add_trace(
    go.Scatter(x=Furniture.Month, y=Furniture["TOTAL QUANTITY"], name="Furniture")
)

fig.add_trace(
    go.Scatter(x=Office_Supplies.Month, y=Office_Supplies["TOTAL QUANTITY"], name="Office Supplies")
)

fig.add_trace(
    go.Scatter(x=Technology.Month, y=Technology["TOTAL QUANTITY"], name="Technology")
)

fig.update_layout(
    title_text="Montly Total Quantity Change of Categories"
)


# Set x-axis title
fig.update_xaxes(title_text="Months")

# Set y-axis title
fig.update_yaxes(title_text="Total Quantity")

fig.show()

Office_Supplies = table[table['Category']=='Office Supplies']
fig = px.line(Office_Supplies, x=Office_Supplies.Month, y="TOTAL QUANTITY", title='Total Office Supplies Quantities by Months')
fig.show()

table=pd.read_sql("SELECT Month, COUNT(DISTINCT([Order ID])) AS [Order Amount], COUNT(DISTINCT([Customer ID])) AS [Customer Amount] FROM `ecomm_data` GROUP BY Month", conn)
table

table['Month'] = pd.Categorical(table['Month'], categories=ecomm_data.Month.unique(), ordered=True)
table.sort_values(by='Month', inplace=True)
table

fig = px.line(table, x="Month", y="Order Amount",  text="Order Amount")
fig.update_traces(textposition="bottom right")
fig.show()

import plotly.graph_objects as go
from plotly.subplots import make_subplots

fig = make_subplots()

fig.add_trace(
    go.Scatter(x=table.Month, y=table["Order Amount"], name="Order Amount")
)

fig.add_trace(
    go.Scatter(x=table.Month, y=table["Customer Amount"], name="Customer Amount")
)


fig.update_layout(
    title_text="Montly Total Order and Customer Amount Changes"
)


# Set x-axis title
fig.update_xaxes(title_text="Months")

# Set y-axis title
fig.update_yaxes(title_text="Total Quantity")

fig.show()

table = pd.pivot_table(ecomm_data, index = ['Month','State Code', 'State'],  aggfunc={'Quantity': np.sum, 'Sales': np.mean})
table

table=table.reset_index()

table['Month'] = pd.Categorical(table['Month'], categories=ecomm_data.Month.unique(), ordered=True)
table.sort_values(by='Month', inplace=True)
table

fig = px.choropleth(table, locations="State Code",locationmode="USA-states", color="Quantity", hover_name="State", animation_frame="Month", range_color=(0,400) )
fig.update_layout(title={
        'text': "Monthly Total Quantity Change of States",
        'y':0.92,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        legend_title = 'Total Quantity',
        legend=dict(x=0.8),
        coloraxis_colorbar_x=0.1)
fig.show()

fig = px.choropleth(table, locations="State Code",locationmode="USA-states", color="Sales", hover_name="State", animation_frame="Month")
fig.update_layout(title={
        'text': "Monthly Average Sales Change of States",
        'y':0.92,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        legend_title = 'Average Sales',
        legend=dict(x=0.8),
        coloraxis_colorbar_x=0.1)

fig.show()

table=pd.read_sql("SELECT Month, Category, [Sub-Category], MAX([Total Quantity]) AS [Total Quantity] FROM (SELECT [Order Date], Month, Category, [Sub-Category], SUM(Quantity) AS [Total Quantity] FROM `ecomm_data` GROUP BY Month, Category, [Sub-Category]) GROUP BY Month  ORDER BY [Order Date]", conn)

table

fig = px.bar(table, x=table.Month, y='Total Quantity', orientation='v',  text_auto=True, pattern_shape="Sub-Category", color= 'Category', category_orders = {"Month":ecomm_data['Month'].unique()})
fig.show()

table = pd.pivot_table(ecomm_data, index = ['Day of Week'], aggfunc={'Quantity': np.sum}).reindex(index=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])
table

fig = px.line(table, x=table.index, y="Quantity", title='Total Quantities by Day of Week')
fig.show()

table=pd.read_sql("SELECT Month, COUNT(DISTINCT([State Code])) AS [Number of State] FROM `ecomm_data` GROUP BY Month ORDER BY [Order Date]", conn)
table

fig = px.line(table, x="Month", y="Number of State",  text="Number of State")
fig.update_traces(textposition="bottom right")
fig.show()

table = pd.pivot_table(ecomm_data, index = ['Month'], aggfunc={'Discount': np.mean, 'Quantity': np.sum})
table = table.reindex(index=ecomm_data.Month.unique())
table

import plotly.graph_objects as go
from plotly.subplots import make_subplots

fig = make_subplots(specs=[[{"secondary_y": True}]])

fig.add_trace(
    go.Scatter(x=table.index, y=table["Discount"], name="Mean Discount"),
    secondary_y=False,
)

fig.add_trace(
    go.Scatter(x=table.index, y=table["Quantity"], name="Sum Quantity"),
    secondary_y=True,
)

fig.update_layout(
    title_text="Montly Change of Discount and Quantity"
)


# Set x-axis title
fig.update_xaxes(title_text="Months")

# Set y-axes titles
fig.update_yaxes(title_text="Mean Discount", secondary_y=False)
fig.update_yaxes(title_text="Sum Quantity", secondary_y=True)

fig.show()

fig = px.strip(ecomm_data, x="Quantity", y="Sales", orientation="h", color="Ship Mode")
fig.show()

fig = px.strip(ecomm_data, x="Quantity", y="Sales", orientation="h", color="Segment")
fig.show()

table = pd.pivot_table(ecomm_data, index = ['Segment', 'Category'],  aggfunc={'Quantity': np.mean})
table = table.reset_index()
table

table = pd.read_sql("SELECT Segment, Category, COUNT(*) AS [TOTAL QUANTITY] FROM `ecomm_data` GROUP BY Segment, Category", conn)
table

Consumer = table[table['Segment']=='Consumer']
fig = px.pie(Consumer, names='Category', values='TOTAL QUANTITY', title="Category Percentages of Consumer Segment", color='Category')
fig.update_layout(title={
        'text': "Category Percentages of Consumer Segment",
        'y':0.88,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        legend_title = 'Category',
        legend=dict(x=0.65))
fig.show()

Corporate = table[table['Segment']=='Corporate']
fig = px.pie(Corporate, names='Category', values='TOTAL QUANTITY', title="Category Percentages of Corporate Segment", color='Category')
fig.update_layout(title={
        'text': "Category Percentages of Corporate Segment",
        'y':0.88,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        legend_title = 'Category',
        legend=dict(x=0.65))
fig.show()

Home_Office = table[table['Segment']=='Home Office']
fig = px.pie(Home_Office, names='Category', values='TOTAL QUANTITY', title="Category Percentages of Home Office Segment", color='Category')
fig.update_layout(title={
        'text': "Category Percentages of Home Office Segment",
        'y':0.88,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        legend_title = 'Category',
        legend=dict(x=0.65))
fig.show()

table = pd.pivot_table(ecomm_data, index = ['Segment', 'Product Name'],  aggfunc={'Quantity': np.sum}).sort_values(by='Quantity', ascending = False)
table

fig = px.violin(ecomm_data, y="Discount", x="Month", box=True, points="all",
          hover_data=ecomm_data.columns)
fig.update_layout(title={
        'text': "Discount Density by Months",
        'y':0.92,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'})
fig.show()

fig = px.violin(ecomm_data, y="Discount", x="Segment", box=True, points="all",
          hover_data=ecomm_data.columns)
fig.update_layout(title={
        'text': "Discount Density by Segment",
        'y':0.92,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'})

fig.show()

fig = px.pie(ecomm_data, names='Segment', values='Quantity', title='Percent distribution of Segment', color='Segment')
fig.update_layout(title={
        'text': "Percent distribution of Segment",
        'y':0.88,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        legend_title = 'Category',
        legend=dict(x=0.65))
fig.show()

table = pd.pivot_table(ecomm_data, index = ['Segment'],  aggfunc={'Quantity': np.sum, 'Sales': np.mean})
table

fig = px.pie(ecomm_data, names='Ship Mode', values='Quantity', title='Percent distribution of Ship Mode', color='Ship Mode')
fig.update_layout(title={
        'text': "Percent distribution of Ship Mode",
        'y':0.88,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        legend_title = 'Category',
        legend=dict(x=0.65))
fig.show()

query=pd.read_sql("SELECT City, COUNT(*) FROM `ecomm_data` WHERE [Ship Mode] = 'Standard Class' GROUP BY City HAVING COUNT(*)<100 ORDER BY COUNT(*)", conn)

fig1 = px.bar(query, x="City", y="COUNT(*)", orientation='v')
fig1.show()

table = pd.read_sql("SELECT Region, SUM(Quantity) AS [TOTAL QUANTITY] FROM `ecomm_data` GROUP BY Region ORDER BY [TOTAL QUANTITY] DESC", conn)
table

fig = px.pie(table, names='Region', values='TOTAL QUANTITY', title='Percentages of regions', color='Region')
fig.update_layout(title={
        'text': "Percentages of regions",
        'y':0.88,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        legend_title = 'Category',
        legend=dict(x=0.66))
fig.show()